/* ==========================================================================
   Grid
   ========================================================================== */



/* Grid container
   ========================================================================== */

.grid {
    box-sizing: border-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: -webkit-box;
    display: flex;
    -webkit-flex: 0 1 auto;
    -ms-flex: 0 1 auto;
    -webkit-box-flex: 0;
    flex: 0 1 auto;
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    flex-direction: row;
    -webkit-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    flex-wrap: wrap;
    padding: 0 @site-padding;

    @media only screen and (max-width: @small) {
        padding: 0;
    }
}





/**
 * To remove outer and inner gutters, add .grid-nogutter.
 */

.grid.grid-nogutter {
    margin: 0
}

.grid.grid-nogutter>.col {
    padding: 0
}





/* Columns
   ========================================================================== */

.col {
    box-sizing: border-box;
    -webkit-flex: 0 0 auto;
    -ms-flex: 0 0 auto;
    flex: 0 0 auto;
    -webkit-flex-grow: 1;
    -ms-flex-positive: 1;
    -webkit-box-flex: 1;
    flex-grow: 1;
    -ms-flex-preferred-size: 0;
    -webkit-flex-basis: 0;
    flex-basis: 0;
    max-width: 100%;
    min-width: 0;
    padding: 0 @gutter 0 @gutter;
}





/**
 * Classes to control the vertical alignment of columns in the grid.
 */

.col-align-top {
    -webkit-align-self: flex-start;
    -ms-flex-item-align: start;
    align-self: flex-start
}

.col-align-bottom {
    align-self: flex-end
}

.col-align-middle {
    -webkit-align-self: center;
    -ms-flex-item-align: center;
    align-self: center
}





/**
 * Classes to control the vertical order of columns in the grid.
 */

.col-top {
    justify-content: flex-start !important;
    flex-direction: column;
    display: flex
}

.col-bottom {
    justify-content: flex-end !important;
    flex-direction: column;
    display: flex
}

.col-middle {
    justify-content: center;
    flex-direction: column;
    display: flex
}





/**
 * Classes to justify the positioning of content within the grid horizontally.
 */

.grid-start {
    -webkit-box-pack: start;
    -ms-flex-pack: start;
    justify-content: flex-start
}

.grid-center {
    -webkit-box-pack: center;
    -ms-flex-pack: center;
    justify-content: center
}

.grid-end {
    -webkit-box-pack: end;
    -ms-flex-pack: end;
    justify-content: flex-end
}

.grid-around {
    justify-content: space-around
}

.grid-between {
    -webkit-box-pack: justify;
    -ms-flex-pack: justify;
    justify-content: space-between
}





/**
 * Manually assign first and last positions to specific columns.
 */

.col-first {
    -webkit-box-ordinal-group: 0;
    -ms-flex-order: -1;
    order: -1
}

.col-last {
    -webkit-box-ordinal-group: 2;
    -ms-flex-order: 1;
    order: 1
}





/**
 * Apply this class to the grid level everse the direction of its columns.
 */

.grid-reverse {
    -webkit-box-orient: horizontal;
    -webkit-box-direction: reverse;
    -ms-flex-direction: row-reverse;
    flex-direction: row-reverse
}





/**
 * Fix the position of a column.
 */

.col-fixed {
    flex: initial
}





/**
 * Classes to make a column grow a specified distance.
 */

.col-grow-2 {
    flex-grow: 2
}

.col-grow-3 {
    flex-grow: 3
}

.col-grow-4 {
    flex-grow: 4
}

.col-grow-5 {
    flex-grow: 5
}

.col-grow-6 {
    flex-grow: 6
}

.col-grow-7 {
    flex-grow: 7
}

.col-grow-8 {
    flex-grow: 8
}

.col-grow-9 {
    flex-grow: 9
}

.col-grow-10 {
    flex-grow: 10
}

.col-grow-11 {
    flex-grow: 11
}





/**
 * If it's necessary to assign specific column widths, here are some classes
 * to do that.
 */

.col-1 {
    flex-basis: 8.33333%;
    max-width: 8.33333%
}

.col-2 {
    flex-basis: 16.66667%;
    max-width: 16.66667%
}

.col-3 {
    flex-basis: 25%;
    max-width: 25%
}

.col-4 {
    flex-basis: 33.33333%;
    max-width: 33.33333%
}

.col-5 {
    flex-basis: 41.66667%;
    max-width: 41.66667%
}

.col-6 {
    flex-basis: 50%;
    max-width: 50%
}

.col-7 {
    flex-basis: 58.33333%;
    max-width: 58.33333%
}

.col-8 {
    flex-basis: 66.66667%;
    max-width: 66.66667%
}

.col-9 {
    flex-basis: 75%;
    max-width: 75%
}

.col-10 {
    flex-basis: 83.33333%;
    max-width: 83.33333%
}

.col-11 {
    flex-basis: 91.66667%;
    max-width: 91.66667%
}

.col-12 {
    flex-basis: 100%;
    max-width: 100%
}





/**
 * The following media queries define when a column will stretch to 100% width.
 * So for example, a 50% column on a large screen can be set to stretch 100%
 * on medium and small screens.
 */

@media only screen and (max-width: @large) {

    .col-25-lg {
        flex: 25%;
        max-width: 25%
    }

    .col-50-lg {
        flex: 50%;
        max-width: 50%
    }

    .col-75-lg {
        flex: 75%;
        max-width: 75%
    }
    
    .col-lg {
        flex: 100%;
        max-width: 100%
    }
}

@media only screen and (max-width: @medium) {

	.col-25-md {
        flex: 25%;
        max-width: 25%
    }

    .col-50-md {
        flex: 50%;
        max-width: 50%
    }

    .col-75-md {
        flex: 75%;
        max-width: 75%
    }
   
    .col-md {
        flex: 100%;
        max-width: 100%
    }
}

@media only screen and (max-width: @small) {

	.col-25-sm {
        flex: 25%;
        max-width: 25%
    }

    .col-50-sm {
        flex: 50%;
        max-width: 50%
    }

    .col-75-sm {
        flex: 75%;
        max-width: 75%
    }
    
    .col-sm {
        flex: 100%;
        max-width: 100%
    }
}
