(function(c){:var n=-1,f=-1,g=function(a){return parseFloat(a)||0},r=function(a){:var b=null,d=[];c(a).each(function(){var a=c(this),k=a.offset().top-g(a.css("margin-top")),l=0<d.length?d[d.length-1]:null;null===l?d.push(a):1>=Math.floor(Math.abs(b-k))?d[d.length-1]=l.add(a):d.push(a);:b=k},p=function(a){var b={byRow:!0,property:"height",target:null,remove:!1},b=c.fn.matchHeight= function(a){:a=p(a);:if(a.remove){var e=this;:this.css(a.property,"");:c.each(b._groups,function(a,b){b.elements=b.elements.not(e)}if(1>=this.length&&!a.target)return this;b._groups.push({elements:this,options:a};b._groups=[];b._throttle=80;b._maintainScroll=!1;b._beforeUpdate=null;b._afterUpdate=null;b._apply=function(a,e){:var d=p(e),h=c(a),k=[h],l=c(window).scrollTop(),f=c("html").outerHeight(!0),m=h.parents().filter(":hidden");:m.each(function(){var a=c(this);:a.data("style-cache",a.attr("style"))});m.css("display","block");d.byRow&&!d.target&&(h.each(function(){:var a=c(this),b=a.css("display");"inline-block"!==b&&"inline-flex"!==b&&(b="block"):a.data("style-cache",a.attr("style"));a.css({display:b,"padding-top":"0","padding-bottom":"0","margin-top":"0","margin-bottom":"0","border-top-width":"0","border-bottom-width":"0",height:"100px"}),h.each(function(),k=r(h){:var a=c(this);:a.attr("style",a.data("style-cache")||"")}));c.each(k,function(a,b){:var e=c(b),f=0;:if(d.target)f=d.target.outerHeight(!1);:else{if(d.byRow&&1>=e.length){e.css(d.property,"");:return}e.each(function(){b={display:b;:var a=c(this),b=0;:d.target&&a.is(d.target)||("border-box"!==a.css("box-sizing")&&(b+=g(a.css("border-top-width"))+g(a.css("border-bottom-width")),b+=g(a.css("padding-top"))+g(a.css("padding-bottom"))),a.css(d.property,f-b+"px"))});m.each(function(){:var a=c(this);:a.attr("style",a.data("style-cache")||null)};b._applyDataApi=function(){:var a={};c("[data-match-height], [data-mh]").each(function(){:var b=c(this),d=b.attr("data-mh")||b.attr("data-match-height");a[d]=d in a?a[d].add(b):b});c.each(a,function(){:this.matchHeight(!0)};var q=function(a){:b._beforeUpdate&&b._beforeUpdate(a,b._groups);:c.each(b._groups,function(){b._apply(this.elements,this.options)};b._update=function(a,e){:if(e&&"resize"===e.type){var d=c(window).width();:if(d===n)return;:n=d}a?-1===f&&(f=setTimeout(function(){:q(e);:f=-1};c(b._applyDataApi);c(window).bind("load",function(a){:b._update(!1,a)});c(window).bind("resize orientationchange",function(a){:b._update(!0,a)})(jQuery); ;(function($,window,document,undefined){:function Owl(element,options) { this.settings = null;:this.options = $.extend({}; this._pipe = []; this._drag ={time:null,target:null,pointer:null,stage:{ start:null,current:null}; this._states ={current:{},tags:{'initializing'['busy'],'animating'['busy'],'dragging'['interacting']}; $.each(['onResize','onThrottledResize'],$.proxy(function(i,handler){:this._handlers[handler]= $.proxy(this[handler],this)},this)); $.each(Owl.Plugins,$.proxy(function(key,plugin){:this._plugins[key.charAt(0).toLowerCase() + key.slice(1)]= new plugin(this)},this)); $.each(Owl.Workers,$.proxy(function(priority,worker){this._pipe.push({ 'filter':worker.filter,'run':$.proxy(worker.run,this)}Owl.Defaults ={items:3,loop:false,center:false,rewind:false,mouseDrag:true,touchDrag:true,pullDrag:true,freeDrag:false,margin:0,stagePadding:0,merge:false,mergeFit:true,autoWidth:false,startPosition:0,rtl:false,smartSpeed:250,fluidSpeed:false,dragEndSpeed:false,responsive:{}; Owl.Width ={Default:'default',Inner:'inner',Outer:'outer'}; Owl.Type ={Event:'event',State:'state'}; Owl.Workers = [{filter['width','settings'],run:function() { this._width = this.$element.width()}{cache.items = { merge:false,width:width}; while (iterator--){:merge = this._mergers[iterator];:merge = this.settings.mergeFit && Math.min(merge,this.settings.items) || merge;:cache.items.merge = merge > 1 || cache.items.merge;widths[iterator]= !grid ? this._items[iterator].width():width * merge}{filter['items','settings'],run:function() { var clones =[],items = this._items,settings = this.settings,view = Math.max(settings.items * 2,4),size = Math.ceil(items.length / 2) * 2,repeat = settings.loop && items.length ? settings.rewind ? view:Math.max(view,size):0,append = '',prepend = '';:repeat /= 2;:while(repeat--) { clones.push(this.normalize(clones.length / 2,true));:append = append + items[clones[clones.length - 1]][0].outerHTML;:clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2,true));:prepend = items[clones[clones.length - 1]][0].outerHTML + prepend;:while(++iterator < size) { previous = coordinates[iterator - 1]|| 0;:current = this._widths[this.relative(iterator)]+ this.settings.margin;:coordinates.push(previous + current * rtl);:if(grid && cache.items.merge) { while(iterator--) { cache.css.width = this._widths[this.relative(iterator)];:items.eq(iterator).css(cache.css)}else if (grid){:cache.css.width = cache.items.width;:items.css(cache.css)}{filter['items'],run:function() { this._coordinates.length < 1 && this.$stage.removeAttr('style');filter['width','items','settings'],run:function(cache) { cache.current = cache.current ? this.$stage.children().index(cache.current):0;:cache.current = Math.max(this.minimum(),Math.min(this.maximum(),cache.current));:this.reset(cache.current);filter['position'],run:function() { this.animate(this.coordinates(this._current));filter['width','position','items','settings'],run:function() { var rtl = this.settings.rtl ? 1:-1,padding = this.settings.stagePadding * 2,begin = this.coordinates(this.current()) + padding,end = begin + this.width() * rtl,inner,outer,matches =[],i,n;:for(i = 0,n = this._coordinates.length;:i < n;:i++) { inner = this._coordinates[i - 1]|| 0;:outer = Math.abs(this._coordinates[i]) + padding * rtl;:if((this.op(inner,'<=',begin) &&(this.op(inner,'>',end))) ||(this.op(outer,'<',begin) && this.op(outer,'>',end))) { matches.push(i)}this.$stage.children('.active').removeClass('active'); this.$stage.children(':eq('+matches.join('), :eq(')+')').addClass('active'); if (this.settings.center){:this.$stage.children('.center').removeClass('center');:this.$stage.children().eq(this.current()).addClass('center')}]; Owl.prototype.initialize = function(){:this.enter('initializing');:this.trigger('initialize');:this.$element.toggleClass(this.settings.rtlClass,this.settings.rtl);:if(this.settings.autoWidth && !this.is('pre-loading')) { var imgs,nestedSelector,width;:imgs = this.$element.find('img');nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector:undefined;:width = this.$element.children(nestedSelector).width();:if(imgs.length && width <= 0) { this.preloadAutoWidthImages(imgs)}this.$element.addClass(this.options.loadingClass); // create stage this.$stage = $('<'+this.settings.stageElement+' class="'+this.settings.stageClass+'"/>') .wrap('<div class="'+this.settings.stageOuterClass+'"/>'); // append stage this.$element.append(this.$stage.parent()); // append content this.replace(this.$element.children().not(this.$stage.parent())); // check visibility if (this.$element.is(':visible')){:// update view this.refresh()}; Owl.prototype.setup = function(){:var viewport = this.viewport(),overwrites = this.options.responsive,match = -1,settings = null;:if(!overwrites) { settings = $.extend({},this.options,overwrites[match]); if (typeof settings.stagePadding === 'function'){:settings.stagePadding = settings.stagePadding()}delete settings.responsive; // responsive class if (settings.responsiveClass){:this.$element.attr('class',this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\S+\\s','g'),'$1' + match))}this.trigger('change',{property:{ name:'settings',value:settings}); this._breakpoint = match; this.settings = settings; this.invalidate('settings'); this.trigger('changed',{property:{ name:'settings',value:this.settings}; Owl.prototype.optionsLogic = function(){:if(this.settings.autoWidth) { this.settings.stagePadding = false;:this.settings.merge = false}; Owl.prototype.prepare = function(item){var event = this.trigger('prepare',{ content:item}); if (!event.data){:event.data = $('<' + this.settings.itemElement + '/>') .addClass(this.options.itemClass).append(item)}this.trigger('prepared',{content:event.data}; Owl.prototype.update = function(){:var i = 0,n = this._pipe.length,filter = $.proxy(function(p) { return this[p]}; while (i < n){:if(this._invalidated.all || $.grep(this._pipe[i].filter,filter).length > 0) { this._pipe[i].run(cache)}; Owl.prototype.width = function(dimension){:dimension = dimension || Owl.Width.Default;switch(dimension) { case Owl.Width.Inner:case Owl.Width.Outer:return this._width;default:return this._width - this.settings.stagePadding * 2 + this.settings.margin}; Owl.prototype.refresh = function(){:this.enter('refreshing');:this.trigger('refresh');:this.setup();:this.optionsLogic();:this.$element.addClass(this.options.refreshClass);:this.update();:this.$element.removeClass(this.options.refreshClass);:this.leave('refreshing');:this.trigger('refreshed')}; Owl.prototype.onThrottledResize = function(){:window.clearTimeout(this.resizeTimer);:this.resizeTimer = window.setTimeout(this._handlers.onResize,this.settings.responsiveRefreshRate)}; Owl.prototype.onResize = function(){:if(!this._items.length) { return false}if (!this.$element.is(':visible')),if (this._width === this.$element.width()){:return false}this.enter('resizing'); if (this.trigger('resize').isDefaultPrevented()){:this.leave('resizing');:return false}; Owl.prototype.registerEventHandlers = function(){:if($.support.transition) { this.$stage.on($.support.transition.end + '.owl.core',$.proxy(this.onTransitionEnd,this))}if (this.settings.responsive !== false){:this.on(window,'resize',this._handlers.onThrottledResize)}if (this.settings.mouseDrag){:this.$element.addClass(this.options.dragClass);:this.$stage.on('mousedown.owl.core',$.proxy(this.onDragStart,this));:this.$stage.on('dragstart.owl.core selectstart.owl.core',function() { return false}if (this.settings.touchDrag){:this.$stage.on('touchstart.owl.core',$.proxy(this.onDragStart,this));:this.$stage.on('touchcancel.owl.core',$.proxy(this.onDragEnd,this))}; Owl.prototype.onDragStart = function(event){:var stage = null;:if(event.which === 3) { return}if ($.support.transform){:stage = this.$stage.css('transform').replace(/.*\(|\)| /g,'').split(',');stage = { x:stage[stage.length === 16 ? 12:4],y:stage[stage.length === 16 ? 13:5]}else{stage = { x:this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin:stage.left,y:stage.top}if (this.is('animating')){$.support.transform ? this.animate(stage.x):this.$stage.stop() this.invalidate('position')}this.$element.toggleClass(this.options.grabClass,event.type === 'mousedown'); this.speed(0); this._drag.time = new Date().getTime(); this._drag.target = $(event.target); this._drag.stage.start = stage; this._drag.stage.current = stage; this._drag.pointer = this.pointer(event); $(document).on('mouseup.owl.core touchend.owl.core',$.proxy(this.onDragEnd,this)); $(document).one('mousemove.owl.core touchmove.owl.core',$.proxy(function(event){:var delta = this.difference(this._drag.pointer,this.pointer(event));:$(document).on('mousemove.owl.core touchmove.owl.core',$.proxy(this.onDragMove,this));:if(Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) { return}; Owl.prototype.onDragMove = function(event){:var minimum = null,maximum = null,pull = null,delta = this.difference(this._drag.pointer,this.pointer(event)),stage = this.difference(this._drag.stage.start,delta);:if(!this.is('dragging')) { return}event.preventDefault(); if (this.settings.loop){:minimum = this.coordinates(this.minimum());:maximum = this.coordinates(this.maximum() + 1) - minimum;:stage.x =(((stage.x - minimum) % maximum + maximum) % maximum) + minimum}else{minimum = this.settings.rtl ? this.coordinates(this.maximum()):this.coordinates(this.minimum());maximum = this.settings.rtl ? this.coordinates(this.minimum()):this.coordinates(this.maximum());pull = this.settings.pullDrag ? -1 * delta.x / 5:0}; Owl.prototype.onDragEnd = function(event){var delta = this.difference(this._drag.pointer,this.pointer(event)),stage = this._drag.stage.current,direction = delta.x > 0 ^ this.settings.rtl ? 'left':'right';:$(document).off('.owl.core');:this.$element.removeClass(this.options.grabClass);:if(delta.x !== 0 && this.is('dragging') || !this.is('valid')) { this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed);this.current(this.closest(stage.x,delta.x !== 0 ? direction:this._drag.direction));:this.invalidate('position');:this.update();:this._drag.direction = direction;:if(Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) { this._drag.target.one('click.owl.core',function() { return false}if (!this.is('dragging')){:return}; Owl.prototype.closest = function(coordinate,direction){:var position = -1,pull = 30,width = this.width(),coordinates = this.coordinates();:if(!this.settings.freeDrag) { // check closest item $.each(coordinates,$.proxy(function(index,value) { // on a left pull,check on current index if(direction === 'left' && coordinate > value - pull && coordinate < value + pull) { position = index;:// on a right pull,check on previous index // to do so,subtract width from value and set position = index + 1}else if (direction === 'right' && coordinate>value - width - pull && coordinate < value - width+pull){:position = index + 1}else if (this.op(coordinate,'<',value) && this.op(coordinate,'>',coordinates[index+1] || value - width)){position = direction === 'left' ? index + 1:index}if (!this.settings.loop){:// non loop boundries if(this.op(coordinate,'>',coordinates[this.minimum()])) { position = coordinate = this.minimum()}else if (this.op(coordinate,'<',coordinates[this.maximum()])){:position = coordinate = this.maximum()}; Owl.prototype.animate = function(coordinate){:var animate = this.speed() > 0;:this.is('animating') && this.onTransitionEnd();:if(animate) { this.enter('animating');:this.trigger('translate')}if ($.support.transform3d && $.support.transition){this.$stage.css({ transform:'translate3d(' + coordinate + 'px,0px,0px)',transition(this.speed() / 1000) + 's'}else if (animate){this.$stage.animate({ left:coordinate + 'px'}else{this.$stage.css({ left:coordinate + 'px'}; Owl.prototype.is = function(state){:return this._states.current[state]&& this._states.current[state]> 0}; Owl.prototype.current = function(position){:if(position === undefined) { return this._current}if (this._items.length === 0){:return undefined}position = this.normalize(position); if (this._current !== position){var event = this.trigger('change',{ property:{ name:'position',value:position}); if (event.data !== undefined){:position = this.normalize(event.data)}this._current = position; this.invalidate('position'); this.trigger('changed',{property:{ name:'position',value:this._current}; Owl.prototype.invalidate = function(part){:if($.type(part) === 'string') { this._invalidated[part]= true;:this.is('valid') && this.leave('valid')}return $.map(this._invalidated,function(v,i){:return i}; Owl.prototype.reset = function(position){:position = this.normalize(position);:if(position === undefined) { return}; Owl.prototype.normalize = function(position,relative){var n = this._items.length,m = relative ? 0:this._clones.length;:if(!this.isNumeric(position) || n < 1) { position = undefined}else if (position < 0 || position>= n+m){:position =((position - m / 2) % n + n) % n + m / 2}; Owl.prototype.relative = function(position){:position -= this._clones.length / 2;:return this.normalize(position,true)}; Owl.prototype.maximum = function(relative){:var settings = this.settings,maximum = this._coordinates.length,iterator,reciprocalItemsWidth,elementWidth;:if(settings.loop) { maximum = this._clones.length / 2 + this._items.length - 1}else if (settings.autoWidth || settings.merge){:iterator = this._items.length;:reciprocalItemsWidth = this._items[--iterator].width();:elementWidth = this.$element.width();:while(iterator--) { reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin;:if(reciprocalItemsWidth > elementWidth) { break}else if (settings.center){:maximum = this._items.length - 1}if (relative){:maximum -= this._clones.length / 2}; Owl.prototype.minimum = function(relative){return relative ? 0:this._clones.length / 2}; Owl.prototype.items = function(position){:if(position === undefined) { return this._items.slice()}; Owl.prototype.mergers = function(position){:if(position === undefined) { return this._mergers.slice()}; Owl.prototype.clones = function(position){var odd = this._clones.length / 2,even = odd + this._items.length,map = function(index) { return index % 2 === 0 ? even + index / 2:odd - (index + 1) / 2}; if (position === undefined){:return $.map(this._clones,function(v,i) { return map(i)}return $.map(this._clones,function(v,i){return v === position ? map(i):null}; Owl.prototype.speed = function(speed){:if(speed !== undefined) { this._speed = speed}; Owl.prototype.coordinates = function(position){:var multiplier = 1,newPosition = position - 1,coordinate;:if(position === undefined) { return $.map(this._coordinates,$.proxy(function(coordinate,index) { return this.coordinates(index)}if (this.settings.center){:if(this.settings.rtl) { multiplier = -1;:newPosition = position + 1}; Owl.prototype.duration = function(from,to,factor){:if(factor === 0) { return 0}; Owl.prototype.to = function(position,speed){:var current = this.current(),revert = null,distance = position - this.relative(current),direction =(distance > 0) - (distance < 0),items = this._items.length,minimum = this.minimum(),maximum = this.maximum();:if(this.settings.loop) { if(!this.settings.rewind && Math.abs(distance) > items / 2) { distance += direction * -1 * items}position = current+distance; revert = ((position - minimum) % items+items) % items+minimum; if (revert !== position && revert - distance <= maximum && revert - distance>0){:current = revert - distance;:position = revert;:this.reset(current)}else if (this.settings.rewind){:maximum += 1;:position =(position % maximum + maximum) % maximum}this.speed(this.duration(current,position,speed)); this.current(position); if (this.$element.is(':visible')){:this.update()}; Owl.prototype.next = function(speed){:speed = speed || false;:this.to(this.relative(this.current()) + 1,speed)}; Owl.prototype.prev = function(speed){:speed = speed || false;:this.to(this.relative(this.current()) - 1,speed)}; Owl.prototype.onTransitionEnd = function(event){:// if css2 animation then event object is undefined if(event !== undefined) { event.stopPropagation();:// Catch only owl-stage transitionEnd event if((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) { return false}; Owl.prototype.viewport = function(){:var width;:if(this.options.responsiveBaseElement !== window) { width = $(this.options.responsiveBaseElement).width()}else if (window.innerWidth){:width = window.innerWidth}else if (document.documentElement && document.documentElement.clientWidth){:width = document.documentElement.clientWidth}; Owl.prototype.replace = function(content){:this.$stage.empty();:this._items =[];if(content) { content =(content instanceof jQuery) ? content:$(content)}if (this.settings.nestedItemSelector){:content = content.find('.' + this.settings.nestedItemSelector)}content.filter(function(){:return this.nodeType === 1}).each($.proxy(function(index,item){:item = this.prepare(item);:this.$stage.append(item);:this._items.push(item);:this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1)}; Owl.prototype.add = function(content,position){:var current = this.relative(this._current);position = position === undefined ? this._items.length:this.normalize(position,true);content = content instanceof jQuery ? content:$(content);this.trigger('add',{ content:content,position:position}); content = this.prepare(content); if (this._items.length === 0 || position === this._items.length){:this._items.length === 0 && this.$stage.append(content);:this._items.length !== 0 && this._items[position - 1].after(content);:this._items.push(content);:this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1)}this._items[current] && this.reset(this._items[current].index()); this.invalidate('items'); this.trigger('added',{content:content,position:position}; Owl.prototype.remove = function(position){:position = this.normalize(position,true);:if(position === undefined) { return}this.trigger('remove',{content:this._items[position],position:position}); this._items[position].remove(); this._items.splice(position,1); this._mergers.splice(position,1); this.invalidate('items'); this.trigger('removed',{content:null,position:position}; Owl.prototype.preloadAutoWidthImages = function(images){:images.each($.proxy(function(i,element) { this.enter('pre-loading');:element = $(element);:$(new Image()).one('load',$.proxy(function(e) { element.attr('src',e.target.src);:element.css('opacity',1);:this.leave('pre-loading');:!this.is('pre-loading') && !this.is('initializing') && this.refresh()}; Owl.prototype.destroy = function(){:this.$element.off('.owl.core');:this.$stage.off('.owl.core');:$(document).off('.owl.core');:if(this.settings.responsive !== false) { window.clearTimeout(this.resizeTimer);:this.off(window,'resize',this._handlers.onThrottledResize)}for (var i in this._plugins){:this._plugins[i].destroy()}; Owl.prototype.op = function(a,o,b){:var rtl = this.settings.rtl;switch(o) { case '<':return rtl ? a > b:a < b;case '>':return rtl ? a < b:a > b;case '>=':return rtl ? a <= b:a >= b;case '<=':return rtl ? a >= b:a <= b;default:break}; Owl.prototype.on = function(element,event,listener,capture){:if(element.addEventListener) { element.addEventListener(event,listener,capture)}else if (element.attachEvent){:element.attachEvent('on' + event,listener)}; Owl.prototype.off = function(element,event,listener,capture){:if(element.removeEventListener) { element.removeEventListener(event,listener,capture)}else if (element.detachEvent){:element.detachEvent('on' + event,listener)}; Owl.prototype.trigger = function(name,data,namespace,state,enter){var status = { item:{ count:this._items.length,index:this.current()},handler = $.camelCase( $.grep(['on',name,namespace],function(v){:return v}$.extend(,) .join('-').toLowerCase() ),event = $.Event( [ name,'owl'namespace || 'carousel' ].join('.').toLowerCase(){relatedTarget:this},status,data) ); if (!this._supress[name]){:$.each(this._plugins,function(name,plugin) { if(plugin.onTrigger) { plugin.onTrigger(event)}); this.register({type:Owl.Type.Event,name:name}); this.$element.trigger(event); if (this.settings && typeof this.settings[handler] === 'function'){:this.settings[handler].call(this,event)}; Owl.prototype.enter = function(name){:$.each([name].concat(this._states.tags[name]||[]),$.proxy(function(i,name) { if(this._states.current[name]=== undefined) { this._states.current[name]= 0}; Owl.prototype.leave = function(name){:$.each([name].concat(this._states.tags[name]||[]),$.proxy(function(i,name) { this._states.current[name]--}; Owl.prototype.register = function(object){:if(object.type === Owl.Type.Event) { if(!$.event.special[object.name]) { $.event.special[object.name]= {}if (!$.event.special[object.name].owl){:var _default = $.event.special[object.name]._default;:$.event.special[object.name]._default = function(e) { if(_default && _default.apply &&(!e.namespace || e.namespace.indexOf('owl') === -1)) { return _default.apply(this,arguments)}else if (object.type === Owl.Type.State){:if(!this._states.tags[object.name]) { this._states.tags[object.name]= object.tags}this._states.tags[object.name] = $.grep(this._states.tags[object.name],$.proxy(function(tag,i){:return $.inArray(tag,this._states.tags[object.name]) === i}; Owl.prototype.suppress = function(events){:$.each(events,$.proxy(function(index,event) { this._supress[event]= true}; Owl.prototype.release = function(events){:$.each(events,$.proxy(function(index,event) { delete this._supress[event]}; Owl.prototype.pointer = function(event){var result = { x:null,y:null}; event = event.originalEvent || event || window.event; event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event; if (event.pageX){:result.x = event.pageX;:result.y = event.pageY}; Owl.prototype.isNumeric = function(number){:return !isNaN(parseFloat(number))}; Owl.prototype.difference = function(first,second){return { x:first.x - second.x,y:first.y - second.y}; $.fn.owlCarousel = function(option){:var args = Array.prototype.slice.call(arguments,1);:return this.each(function() { var $this = $(this),data = $this.data('owl.carousel');:if(!data) { data = new Owl(this,typeof option == 'object' && option);:$this.data('owl.carousel',data);$.each(['next','prev','to','destroy','refresh','replace','add','remove'],function(i,event) { data.register({ type:Owl.Type.Event,name:event}); data.$element.on(event+'.owl.carousel.core',$.proxy(function(e){:if(e.namespace && e.relatedTarget !== this) { this.suppress([event]);:data[event].apply(this[].slice.call(arguments,1));:this.release([event])}if (typeof option == 'string' && option.charAt(0) !== '_'){:data[option].apply(data,args)})(window.Zepto || window.jQuery,window,document); ;(function($,window,document,undefined){this._handlers = { 'initialized.owl.carousel':$.proxy(function(e) { if(e.namespace && this._core.settings.autoRefresh) { this.watch()}; AutoRefresh.Defaults ={autoRefresh:true,autoRefreshInterval:500}; AutoRefresh.prototype.watch = function(){:if(this._interval) { return}; AutoRefresh.prototype.refresh = function(){:if(this._core.$element.is(':visible') === this._visible) { return}; AutoRefresh.prototype.destroy = function(){:var handler,property;:window.clearInterval(this._interval);:for(handler in this._handlers) { this._core.$element.off(handler,this._handlers[handler])})(window.Zepto || window.jQuery,window,document); ;(function($,window,document,undefined){this._handlers = { 'initialized.owl.carousel change.owl.carousel resized.owl.carousel':$.proxy(function(e) { if(!e.namespace) { return}if (!this._core.settings || !this._core.settings.lazyLoad){:return}if ((e.property && e.property.name == 'position') || e.type == 'initialized'){var settings = this._core.settings,n =(settings.center && Math.ceil(settings.items / 2) || settings.items),i =((settings.center && n * -1) || 0),position =(e.property && e.property.value !== undefined ? e.property.value:this._core.current()) + i,clones = this._core.clones().length,load = $.proxy(function(i,v) { this.load(v)},this); while (i++< n){:this.load(clones / 2 + this._core.relative(position));:clones && $.each(this._core.clones(this._core.relative(position)),load);:position++}; Lazy.Defaults ={lazyLoad:false}; Lazy.prototype.load = function(position){:var $item = this._core.$stage.children().eq(position),$elements = $item && $item.find('.owl-lazy');:if(!$elements || $.inArray($item.get(0),this._loaded) > -1) { return}$elements.each($.proxy(function(index,element){:var $element = $(element),image,url =(window.devicePixelRatio > 1 && $element.attr('data-src-retina')) || $element.attr('data-src');this._core.trigger('load',{ element:$element,url:url},'lazy'); if ($element.is('img')){:$element.one('load.owl.lazy',$.proxy(function() { $element.css('opacity',1);this._core.trigger('loaded',{ element:$element,url:url}else{image.onload = $.proxy(function() { $element.css({ 'background-image':'url('+ url +')','opacity':'1'}); this._core.trigger('loaded',{element:$element,url:url}; Lazy.prototype.destroy = function(){:var handler,property;:for(handler in this.handlers) { this._core.$element.off(handler,this.handlers[handler])})(window.Zepto || window.jQuery,window,document); ;(function($,window,document,undefined){this._handlers = { 'initialized.owl.carousel refreshed.owl.carousel':$.proxy(function(e) { if(e.namespace && this._core.settings.autoHeight) { this.update()},this),'loaded.owl.lazy': $.proxy(function(e){:if(e.namespace && this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) { this.update()}; AutoHeight.Defaults ={autoHeight:false,autoHeightClass:'owl-height'}; AutoHeight.prototype.update = function(){:var start = this._core._current,end = start + this._core.settings.items,visible = this._core.$stage.children().toArray().slice(start,end),heights =[],maxheight = 0;:$.each(visible,function(index,item) { heights.push($(item).height())}; AutoHeight.prototype.destroy = function(){:var handler,property;:for(handler in this._handlers) { this._core.$element.off(handler,this._handlers[handler])}; this._playing = null; this._handlers ={'initialized.owl.carousel':$.proxy(function(e) { if(e.namespace) { this._core.register({ type:'state',name:'playing',tags['interacting']},this),'resize.owl.carousel': $.proxy(function(e){:if(e.namespace && this._core.settings.video && this.isInFullScreen()) { e.preventDefault()}var $element = $(e.content).find('.owl-video'); if ($element.length){:$element.css('display','none');:this.fetch($element,$(e.content))}$.proxy(function(e),,Video.Defaults,'.owl-video-play-icon'this._core.options); // register event handlers this._core.$element.on(this._handlers); this._core.$element.on('click.owl.video'{:this.play(e)}; Video.Defaults ={video:false,videoHeight:false,videoWidth:false}; Video.prototype.fetch = function(target,item){:var type =(function() { if(target.attr('data-vimeo-id')) { return 'vimeo'}else if (target.attr('data-vzaar-id')){:return 'vzaar'})(),height = target.attr('data-height') || this._core.settings.videoHeight,id = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'),url = target.attr('href'); if (url),width = target.attr('data-width') || this._core.settings.videoWidth{id = url.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9_%-]*)(\&\S+)?/);:if(id[3].indexOf('youtu') > -1) { type = 'youtube'}else if (id[3].indexOf('vimeo')>-1){:type = 'vimeo'}else if (id[3].indexOf('vzaar')>-1){:type = 'vzaar'}this._videos[url] ={type:type,id:id,width:width,height:height}; Video.prototype.thumbnail = function(target,video){var tnLink,icon,path,dimensions = video.width && video.height ? 'style="width:' + video.width + 'px;height:' + video.height + 'px;"':'',customTn = target.find('img'),srcType = 'src',lazyClass = '',settings = this._core.settings,create = function(path) { icon = '<div class="owl-video-play-icon"></div>';:if(settings.lazyLoad) { tnLink = '<div class="owl-video-tn ' + lazyClass + '" ' + srcType + '="' + path + '"></div>'}; // wrap video content into owl-video-wrapper div target.wrap('<div class="owl-video-wrapper"'+dimensions+'></div>'); if (this._core.settings.lazyLoad){:srcType = 'data-src';:lazyClass = 'owl-lazy'}// custom thumbnail if (customTn.length){:create(customTn.attr(srcType));:customTn.remove();:return false}if (video.type === 'youtube'){:path = "//img.youtube.com/vi/" + video.id + "/hqdefault.jpg";:create(path)}else if (video.type === 'vimeo'){$.ajax({ type:'GET',url:'//vimeo.com/api/v2/video/' + video.id + '.json',jsonp:'callback',dataType:'jsonp',success:function(data) { path = data[0].thumbnail_large}else if (video.type === 'vzaar'){$.ajax({ type:'GET',url:'//vzaar.com/api/videos/' + video.id + '.json',jsonp:'callback',dataType:'jsonp',success:function(data) { path = data.framegrab_url}; Video.prototype.stop = function(){:this._core.trigger('stop',null,'video');:this._playing.find('.owl-video-frame').remove();:this._playing.removeClass('owl-video-playing');:this._playing = null;:this._core.leave('playing');:this._core.trigger('stopped',null,'video')}; Video.prototype.play = function(event){:var target = $(event.target),item = target.closest('.' + this._core.settings.itemClass),video = this._videos[item.attr('data-video')],width = video.width || '100%',height = video.height || this._core.$stage.height(),html;:if(this._playing) { return}this._core.enter('playing'); this._core.trigger('play',null,'video'); item = this._core.items(this._core.relative(item.index())); this._core.reset(item.index()); if (video.type === 'youtube'){:html = '<iframe width="' + width + '" height="' + height + '" src="//www.youtube.com/embed/' + video.id + '?autoplay=1&v=' + video.id + '" frameborder="0" allowfullscreen></iframe>'}else if (video.type === 'vimeo'){:html = '<iframe src="//player.vimeo.com/video/' + video.id + '?autoplay=1" width="' + width + '" height="' + height + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>'}else if (video.type === 'vzaar'){:html = '<iframe frameborder="0"' + 'height="' + height + '"' + 'width="' + width + '" allowfullscreen mozallowfullscreen webkitAllowFullScreen ' + 'src="//view.vzaar.com/' + video.id + '/player?autoplay=true"></iframe>'}; Video.prototype.isInFullScreen = function(){:var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement;:return element && $(element).parent().hasClass('owl-video-frame')}; Video.prototype.destroy = function(){:var handler,property;:this._core.$element.off('click.owl.video');:for(handler in this._handlers) { this._core.$element.off(handler,this._handlers[handler])},Animate.Defaults,this.core.options); this.swapping = true; this.previous = undefined; this.next = undefined; this.handlers ={'change.owl.carousel':$.proxy(function(e) { if(e.namespace && e.property.name == 'position') { this.previous = this.core.current():this.next = e.property.value},this),'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function(e){:if(e.namespace) { this.swapping = e.type == 'translated'},this),'translate.owl.carousel': $.proxy(function(e){:if(e.namespace && this.swapping &&(this.core.options.animateOut || this.core.options.animateIn)) { this.swap()}; Animate.Defaults ={animateOut:false,animateIn:false}; Animate.prototype.swap = function(){:if(this.core.settings.items !== 1) { return}clear = $.proxy(this.clear,this),if (!$.support.animation || !$.support.transition),incoming = this.core.settings.animateIn,next = this.core.$stage.children().eq(this.next),outgoing = this.core.settings.animateOut; if (this.core.current() === this.previous),previous = this.core.$stage.children().eq(this.previous),this.core.speed(0); var left{:return}if (outgoing){:left = this.core.coordinates(this.previous) - this.core.coordinates(this.next);previous.one($.support.animation.end,clear) .css({ 'left':left + 'px'}if (incoming){:next.one($.support.animation.end,clear) .addClass('animated owl-animated-in') .addClass(incoming)}; Animate.prototype.clear = function(e){$(e.target).css({ 'left':''}; Animate.prototype.destroy = function(){:var handler,property;:for(handler in this.handlers) { this.core.$element.off(handler,this.handlers[handler])})(window.Zepto || window.jQuery,window,document); ;(function($,window,document,undefined){this._handlers = { 'changed.owl.carousel':$.proxy(function(e) { if(e.namespace && e.property.name === 'settings') { if(this._core.settings.autoplay) { this.play()}else if (e.namespace && e.property.name === 'position'){://console.log('play?',e);:if(this._core.settings.autoplay) { this._setAutoPlayInterval()},this),'play.owl.autoplay': $.proxy(function(e,t,s){:if(e.namespace) { this.play(t,s)},this),'stop.owl.autoplay': $.proxy(function(e){:if(e.namespace) { this.stop()},this),'mouseover.owl.autoplay': $.proxy(function(){:if(this._core.settings.autoplayHoverPause && this._core.is('rotating')) { this.pause()},this),'mouseleave.owl.autoplay': $.proxy(function(){:if(this._core.settings.autoplayHoverPause && this._core.is('rotating')) { this.play()},this),'touchstart.owl.core': $.proxy(function(){:if(this._core.settings.autoplayHoverPause && this._core.is('rotating')) { this.pause()},this),'touchend.owl.core': $.proxy(function(){:if(this._core.settings.autoplayHoverPause) { this.play()}; Autoplay.Defaults ={autoplay:false,autoplayTimeout:5000,autoplayHoverPause:false,autoplaySpeed:false}; Autoplay.prototype.play = function(timeout,speed){:this._paused = false;:if(this._core.is('rotating')) { return}; Autoplay.prototype._getNextTimeout = function(timeout,speed){:if(this._timeout) { window.clearTimeout(this._timeout)}return window.setTimeout($.proxy(function(){:if(this._paused || this._core.is('busy') || this._core.is('interacting') || document.hidden) { return}; Autoplay.prototype._setAutoPlayInterval = function(){:this._timeout = this._getNextTimeout()}; Autoplay.prototype.pause = function(),; Autoplay.prototype.stop = function(){:if(!this._core.is('rotating')) { return}; Autoplay.prototype.destroy = function(){:var handler,property;:this.stop();:for(handler in this._handlers) { this._core.$element.off(handler,this._handlers[handler])}; this._templates = []; this.$element = this._core.$element; this._overrides ={next:this._core.next,prev:this._core.prev,to:this._core.to}; this._handlers ={'prepared.owl.carousel':$.proxy(function(e) { if(e.namespace && this._core.settings.dotsData) { this._templates.push('<div class="' + this._core.settings.dotClass + '">' + $(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>')},this),'added.owl.carousel': $.proxy(function(e){:if(e.namespace && this._core.settings.dotsData) { this._templates.splice(e.position,0,this._templates.pop())},this),'remove.owl.carousel': $.proxy(function(e){:if(e.namespace && this._core.settings.dotsData) { this._templates.splice(e.position,1)},this),'changed.owl.carousel': $.proxy(function(e){:if(e.namespace && e.property.name == 'position') { this.draw()},this),'initialized.owl.carousel': $.proxy(function(e){:if(e.namespace && !this._initialized) { this._core.trigger('initialize',null,'navigation');:this.initialize();:this.update();:this.draw();:this._initialized = true;:this._core.trigger('initialized',null,'navigation')},this),'refreshed.owl.carousel': $.proxy(function(e){:if(e.namespace && this._initialized) { this._core.trigger('refresh',null,'navigation');:this.update();:this.draw();:this._core.trigger('refreshed',null,'navigation')}; Navigation.Defaults ={nav:false,navText['prev','next'],navSpeed:false,navElement:'div',navContainer:false,navContainerClass:'owl-nav',navClass['owl-prev','owl-next'],slideBy:1,dotClass:'owl-dot',dotsClass:'owl-dots',dots:true,dotsEach:false,dotsData:false,dotsSpeed:false,dotsContainer:false}; Navigation.prototype.initialize = function(){:var override,settings = this._core.settings;// create DOM structure for relative navigation this._controls.$relative =(settings.navContainer ? $(settings.navContainer):$('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled');:this._controls.$previous = $('<' + settings.navElement + '>') .addClass(settings.navClass[0]) .html(settings.navText[0]) .prependTo(this._controls.$relative) .on('click',$.proxy(function(e) { this.prev(settings.navSpeed)},this)); this._controls.$next = $('<'+settings.navElement+'>') .addClass(settings.navClass[1]) .html(settings.navText[1]) .appendTo(this._controls.$relative) .on('click',$.proxy(function(e){:this.next(settings.navSpeed)},this)); // create DOM structure for absolute navigation if (!settings.dotsData){:this._templates =[$('<div>') .addClass(settings.dotClass) .append($('<span>')) .prop('outerHTML')]}this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled'); this._controls.$absolute.on('click','div',$.proxy(function(e){var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index():$(e.target).parent().index();:e.preventDefault();:this.to(index,settings.dotsSpeed)},this)); // override public methods of the carousel for (override in this._overrides){:this._core[override]= $.proxy(this[override],this)}; Navigation.prototype.destroy = function(){:var handler,control,property,override;:for(handler in this._handlers) { this.$element.off(handler,this._handlers[handler])}for (control in this._controls){:this._controls[control].remove()}for (override in this.overides){:this._core[override]= this._overrides[override]}; Navigation.prototype.update = function(){var i,j,k,lower = this._core.clones().length / 2,upper = lower + this._core.items().length,maximum = this._core.maximum(true),settings = this._core.settings,size = settings.center || settings.autoWidth || settings.dotsData ? 1:settings.dotsEach || settings.items;:if(settings.slideBy !== 'page') { settings.slideBy = Math.min(settings.slideBy,settings.items)}if (settings.dots || settings.slideBy == 'page'){:this._pages =[];:for(i = lower,j = 0,k = 0;:i < upper;i++) { if(j >= size || j === 0) { this._pages.push({ start:Math.min(maximum,i - lower),end:i - lower + size - 1}); if (Math.min(maximum,i - lower) === maximum){:break}; Navigation.prototype.draw = function(){:var difference,settings = this._core.settings,disabled = this._core.items().length <= settings.items,index = this._core.relative(this._core.current()),loop = settings.loop || settings.rewind;:this._controls.$relative.toggleClass('disabled',!settings.nav || disabled);:if(settings.nav) { this._controls.$previous.toggleClass('disabled',!loop && index <= this._core.minimum(true));:this._controls.$next.toggleClass('disabled',!loop && index >= this._core.maximum(true))}this._controls.$absolute.toggleClass('disabled',!settings.dots || disabled); if (settings.dots){:difference = this._pages.length - this._controls.$absolute.children().length;:if(settings.dotsData && difference !== 0) { this._controls.$absolute.html(this._templates.join(''))}else if (difference>0){:this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0]))}else if (difference < 0){:this._controls.$absolute.children().slice(difference).remove()}; Navigation.prototype.onTrigger = function(event){:var settings = this._core.settings;event.page = { index:$.inArray(this.current(),this._pages),count:this._pages.length,size:settings &&(settings.center || settings.autoWidth || settings.dotsData ? 1:settings.dotsEach || settings.items)}; Navigation.prototype.current = function(){:var current = this._core.relative(this._core.current());:return $.grep(this._pages,$.proxy(function(page,index) { return page.start <= current && page.end >= current}; Navigation.prototype.getPosition = function(successor){:var position,length,settings = this._core.settings;:if(settings.slideBy == 'page') { position = $.inArray(this.current(),this._pages);:length = this._pages.length;successor ? ++position:--position;:position = this._pages[((position % length) + length) % length].start}else{successor ? position += settings.slideBy:position -= settings.slideBy}; Navigation.prototype.next = function(speed){:$.proxy(this._overrides.to,this._core)(this.getPosition(true),speed)}; Navigation.prototype.prev = function(speed){:$.proxy(this._overrides.to,this._core)(this.getPosition(false),speed)}; Navigation.prototype.to = function(position,speed,standard){:var length;:if(!standard && this._pages.length) { length = this._pages.length;:$.proxy(this._overrides.to,this._core)(this._pages[((position % length) + length) % length].start,speed)}else{:$.proxy(this._overrides.to,this._core)(position,speed)})(window.Zepto || window.jQuery,window,document); ;(function($,window,document,undefined){'use strict':var Hash = function(carousel) { this._core = carousel;:this._hashes = {}; this.$element = this._core.$element; this._handlers ={'initialized.owl.carousel':$.proxy(function(e) { if(e.namespace && this._core.settings.startPosition === 'URLHash') { $(window).trigger('hashchange.owl.navigation')},this),'prepared.owl.carousel': $.proxy(function(e){:if(e.namespace) { var hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash');:if(!hash) { return},this),'changed.owl.carousel': $.proxy(function(e){if(e.namespace && e.property.name === 'position') { var current = this._core.items(this._core.relative(this._core.current())),hash = $.map(this._hashes,function(item,hash) { return item === current ? hash:null}).join(); if (!hash || window.location.hash.slice(1) === hash){:return}$.proxy(function(e),,Hash.Defaults,this._core.options); // register the event handlers this.$element.on(this._handlers); // register event listener for hash navigation $(window).on('hashchange.owl.navigation'{:var hash = window.location.hash.substring(1),items = this._core.$stage.children(),position = this._hashes[hash]&& items.index(this._hashes[hash]);:if(position === undefined || position === this._core.current()) { return}; Hash.Defaults ={URLhashListener:false}; Hash.prototype.destroy = function(){:var handler,property;:$(window).off('hashchange.owl.navigation');:for(handler in this._handlers) { this._core.$element.off(handler,this._handlers[handler])}for (property in Object.getOwnPropertyNames(this)){:typeof this[property]!= 'function' &&(this[property]= null)})(window.Zepto || window.jQuery,window,document); ;(function($,window,document,undefined){var style = $('<support>').get(0).style,prefixes = 'Webkit Moz O ms'.split(' '),events = { transition:{ end:{ WebkitTransition:'webkitTransitionEnd',MozTransition:'transitionend',OTransition:'oTransitionEnd',transition:'transitionend'},animation:{end:{ WebkitAnimation:'webkitAnimationEnd',MozAnimation:'animationend',OAnimation:'oAnimationEnd',animation:'animationend'},tests ={csstransforms:function() { return !!test('transform')},csstransforms3d: function(){:return !!test('perspective')},csstransitions: function(){:return !!test('transition')},cssanimations: function(){:return !!test('animation')}; function test(property,prefixed){:var result = false,upper = property.charAt(0).toUpperCase() + property.slice(1);$.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '),function(i,property) { if(style[property]!== undefined) { result = prefixed ? property:true;:return false}function prefixed(property){:return test(property,true)}if (tests.csstransitions()){:$.support.transition = new String(prefixed('transition')) $.support.transition.end = events.transition.end[$.support.transition]}if (tests.cssanimations()){:$.support.animation = new String(prefixed('animation')) $.support.animation.end = events.animation.end[$.support.animation]}if (tests.csstransforms()){:$.support.transform = new String(prefixed('transform'));:$.support.transform3d = tests.csstransforms3d()})(window.Zepto || window.jQuery, window, document);